20201130
=======================================

Amazon RDSにアクセスするSpringアプリケーション
----------------------------------------------


RDS構築
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. 設定

   .. image:: images/aws_rds_sample_arch.png

   .. csv-table::
      :header: "項目", "設定値", "備考"

      "VPC", "ma-common-vpc", "workspacesのlocal applicationから接続するため"
      "Subnet Group", "ma-yamada-database-1", "| 2つ以上の別AZのPrivate Subnetを指定
      既存の共用サブネットを借用"
      "セキュリティグループ", "MA-yamada-rds-sg2", "WorkSpacesのSGからのインバウンド(5432ポート)のみ許可"

#. DBテーブル構築

   #. psqlインストール

   .. code-block:: bash

      sudo yum update -y
      sudo yum install -y postgresql
      psql -U username -d sample_database -h xxxxxxx.ap-northeast-1.rds.amazonaws.com
      postgres=> \i sample_database.sql

   #. テーブル構成

   .. image:: images/aws_rds_sample_table.jpg


#. AWS認証設定

   #. credential設定(Trello_) 
   
   .. _Trello: https://trello.com/c/4Hjrr2YM/1-aws-%E7%92%B0%E5%A2%83%E3%83%BB%E9%96%8B%E7%99%BA%E3%83%A6%E3%83%BC%E3%82%B6

   .. code-block:: properties

      [default]
      aws_access_key_id=XXXXXXXXXXXXXXXX
      aws_secret_access_key=YYYYYYYYYYYYYYYYYYYYYYYYYYYYY

アプリケーション構築
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. コード

   | 構築はほぼしてないので割愛 ※参考_
   | 変更点はapplication.ymlのRDSのidentifer・パスワードくらい

   .. _参考: https://github.com/debugroom/mynavi-sample-aws-rds


#. フロー

   .. uml::

      participant App as a
      participant SampleService as s
      participant UsrRepository as uR
      participant GroupRepository as gR

      a -> s : setData()

      == init() ==

      s -> uR : deleteAll()
      s -> gR : deleteAll()

      == main ==

      s -> gR : saveAll(Arrays.asList(new Group[]{group1, group2}));
      note right
      mynavi-group1
      mynavi-group2
      end note
      s -> uR : saveAll(Arrays.asList(new User[]{user1, user2}));
      note right
      taro
      MAIL: [test@test.com, test1@test.com]
      ADDRESS: Tokyo Chiyodaku
      MEMBERSHIP: [mynavi-group1, mynavi-group2]
      hanako
      MAIL: [test2@test.com, test3@test.com]
      ADDRESS: Tokyo Chuoku
      MEMBERSHIP: [mynavi-group2]
      end note

#. 結果

   Boot Application をローカル実行したら、RDS内のテーブルが更新された。

   .. image:: images/usr.png
   .. image:: images/grp.png
   .. image:: images/membership.png
   .. image:: images/address.png
   .. image:: images/email.png

AWS CloudFormationを使用した基盤自動化
---------------------------------------

AWS CLIの実行環境／AWS認証情報の設定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. aws-cli

   .. code-block:: bash

      pip3 install boto3 --upgrade --user # 先にこっちじゃないとエラーでた
      pip3 install awscli --upgrade --user

      # 確認
      aws --version
      aws-cli/1.18.147 Python/2.7.18 Linux/4.14.203-156.332.amzn2.x86_64 botocore/1.18.6

      aws s3 ls
      2020-04-10 02:50:27 ma-mattermost-bucket
      # omit


各種検証プラグインインストールと統合開発環境の設定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. cfn-lint

   #. command

      .. code-block:: bash

         pip3 install cfn-lint

   #. IntelliJ IDEA Plugin

      * cfn-lint # インストールされてた
      * AWS CloudFormation # インストールされてた

CloudFormationテスト環境の構築
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. taskcatインストール

   #. command
   
      .. code-block:: bash

         pip3 install taskcat --user
         taskcat --version
         _            _             _   
         | |_ __ _ ___| | _____ __ _| |_ 
         | __/ _` / __| |/ / __/ _` | __|
         | || (_| \__ \   < (_| (_| | |_ 
         \__\__,_|___/_|\_\___\__,_|\__|
                                       


         version 0.9.20
         0.9.20

#. テスト

   #. cfn-test.yml

      .. code-block:: yaml

         AWSTemplateFormatVersion: '2010-09-09'

         Description: Sample CloudFormation template with YAML - VPC

         Parameters:
         VPCName:
            Description: Target VPC Stack Name
            Type: String
            MinLength: 1
            MaxLength: 255
            AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
            Default: mynavi-sample-cloudformation-vpc
         VPCCiderBlock:
            Description: CiderBlock paramater for VPC
            Type: String
            MinLength: 9
            MaxLength: 18
            AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
            Default: 172.0.0.0/16

         Resources:
         VPC:
            Type: AWS::EC2::VPC
            Properties:
               CidrBlock: !Sub ${VPCCiderBlock}
               InstanceTenancy: default
               EnableDnsSupport: true
               EnableDnsHostnames: true
               Tags:
               - Key: Name
                  Value: !Sub ${VPCName}

         Outputs:
         VPCID:
            Description: VPC ID
            Value: !Ref VPC
            Export:
               Name: !Sub ${AWS::StackName}-VPCID

   #. .taskcat.yml

      .. code-block:: yaml

         project:                         
         name: sample-aws-cloudformation  
         regions:
            - us-west-1              
         tests:                       
         vpc-test:                  
            template: ./test-cfn.yaml

#. 結果

   .. image:: images/taskcat.png
   .. image:: images/taskcat_result.png
